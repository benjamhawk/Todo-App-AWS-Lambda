{"version":3,"file":"./.aws-sam/build/getByIdFunction/app.js","mappings":"uBAGIA,EAAsB,I,4ZCSb,EAAAC,eAAwBC,GAAU,OAAD,6BAC5C,GAAyB,QAArBA,EAAMC,WACR,MAAM,IAAIC,MACR,gDAAgDF,EAAMC,cAiB1D,MAMME,EAAW,CACfC,WAAY,IACZC,KAAMC,KAAKC,UARA,CACXC,GAAI,EACJC,KAAM,SACNC,MAAO,KAYT,OAHAC,QAAQC,KACN,kBAAkBZ,EAAMa,oBAAoBV,EAASC,oBAAoBD,EAASE,QAE7EF,QD3CW,KAAK,EAAGL,G","sources":["webpack://delete-test-01/webpack/startup","webpack://delete-test-01/./src/handlers/get-by-id.ts"],"sourcesContent":["// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[823](0, __webpack_exports__);\n","// // Create clients and set shared const values outside of the handler.\n\n// // Get the DynamoDB table name from environment variables\n// const tableName = process.env.SAMPLE_TABLE;\n\n// // Create a DocumentClient that represents the query to add an item\n// const dynamodb = require('aws-sdk/clients/dynamodb');\n// const docClient = new dynamodb.DocumentClient();\n\n/**\n * A simple example includes a HTTP get method to get one item by id from a DynamoDB table.\n */\nexport const getByIdHandler = async (event) => {\n  if (event.httpMethod !== \"GET\") {\n    throw new Error(\n      `getMethod only accept GET method, you tried: ${event.httpMethod}`\n    );\n  }\n  // All log statements are written to CloudWatch\n  // console.info('received:', event);\n\n  // // Get id from pathParameters from APIGateway because of `/{id}` at template.yaml\n  // const id = event.pathParameters.id;\n\n  // // Get the item from the table\n  // // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#get-property\n  // var params = {\n  //   TableName : tableName,\n  //   Key: { id: id },\n  // };\n  // const data = await docClient.get(params).promise();\n  // const item = data.Item;\n  const item = {\n    id: 1,\n    name: \"item 1\",\n    order: 1,\n  };\n\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify(item),\n  };\n\n  // All log statements are written to CloudWatch\n  console.info(\n    `response from: ${event.path} statusCode: ${response.statusCode} body: ${response.body}`\n  );\n  return response;\n};\n"],"names":["__webpack_exports__","getByIdHandler","event","httpMethod","Error","response","statusCode","body","JSON","stringify","id","name","order","console","info","path"],"sourceRoot":""}